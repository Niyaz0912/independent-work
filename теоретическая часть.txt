    Паттерн - это как рецепт, который помогает решать определенные проблемы. Паттерны помогают выбрать
наиболее подходящий путь(сценарий решения проблемы) Если программист (разработчик) правильно определит
какой именно паттерн выбрать для решения проблемы, он сможет за несколько шагов решить ее.

    Разновидности паттернов
Паттерны бывают трех типов:
Создающие паттерны: Помогают создавать объекты.
Структурные паттерны: Помогают соединять объекты.
Поведенческие паттерны: Помогают объектам общаться друг с другом.


    Принципы SOLID — это набор из пяти основных правил, которые помогают разработчикам создавать более качественный,
поддерживаемый и гибкий код. Вот краткое объяснение каждого из них:

    1. Принцип единственной ответственности (Single Responsibility Principle, SRP)
Каждый класс должен иметь только одну причину для изменения, то есть выполнять лишь одну задачу. Это значит,
что если класс отвечает за несколько функций, его сложнее понимать и изменять. Например, если у вас есть класс,
который и обрабатывает данные, и выводит их на экран, изменения в одной части могут повлиять на другую.
Разделение обязанностей делает код более организованным и легким для тестирования.

    2. Принцип открытости/закрытости (Open-Closed Principle, OCP)
Классы должны быть открыты для расширения, но закрыты для модификации. Это значит, что вы можете добавлять новую
функциональность, не изменяя существующий код. Например, если у вас есть класс, который обрабатывает разные типы платежей,
вы можете создать новый класс для нового типа платежа, не меняя старый класс.

    3. Принцип подстановки Лисков (Liskov Substitution Principle, LSP)
Объекты подкласса должны быть заменяемыми на объекты базового класса без изменения правильности программы. Это значит,
что если у вас есть класс, который использует базовый класс, вы должны иметь возможность подставить любой из его подклассов,
и код должен продолжать работать. Например, если у вас есть класс Bird, и вы создаете подкласс Penguin, который не может летать,
то использование Penguin вместо Bird может нарушить логику, если ваш код предполагает, что все птицы могут летать.

    4. Принцип разделения интерфейсов (Interface Segregation Principle, ISP)
Лучше иметь много специализированных интерфейсов, чем один универсальный. Это означает, что клиенты не должны зависеть от методов,
которые они не используют. Например, если у вас есть интерфейс, который включает методы для печати и сканирования,
 и у вас есть класс, который только печатает, он не должен реализовывать методы сканирования.

    5. Принцип инверсии зависимостей (Dependency Inversion Principle, DIP)
Модули верхнего уровня не должны зависеть от модулей нижнего уровня; оба должны зависеть от абстракций (например, интерфейсов).
Это значит, что вместо того, чтобы класс напрямую создавал экземпляры других классов, он должен работать с абстракциями,
чтобы уменьшить зависимость. Например, вместо того, чтобы класс PaymentProcessor напрямую создавал объект CreditCardPayment,
он должен зависеть от интерфейса Payment, который реализует CreditCardPayment.
Следуя этим принципам, разработчики могут создавать более чистый, понятный и легко поддерживаемый код, что особенно важно
при работе в команде или над крупными проектами.


    MVC (пример с тортом)
MVC - это как разделить рецепт на три части:
Модель (Model): Описывает ингредиенты и их количество.
Представление (View): Показывает, как должен выглядеть готовый торт.
Контроллер (Controller): Объясняет, как смешивать ингредиенты и выпекать торт.


    Многопоточное программирование — это способ организации работы программ, позволяющий выполнять несколько задач одновременно.


HTTP и HTTPS - это как два разных способа отправлять письма. HTTP - это как отправлять письмо без конверта,
а HTTPS - с конвертом. HTTPS шифрует письмо, чтобы никто, кроме получателя, не мог его прочитать.
OSI - это как семь этажей дома, по которым передается письмо. Каждый этаж выполняет свою работу:
Физический этаж: Отвечает за доставку письма.
Канальный этаж: Следит, чтобы письмо не потерялось.
Сетевой этаж: Определяет, куда отправить письмо.
Транспортный этаж: Проверяет, что письмо доставлено правильно.
Сессионный этаж: Следит, чтобы письмо отправлялось непрерывно.
Представление: Переводит письмо на понятный язык.
Прикладной этаж: Отвечает за содержание письма.

TCP/IP и UDP - это как два разных способа отправлять письма. TCP/IP - это как отправлять письмо с подтверждением доставки.
UDP - это как отправлять письмо без подтверждения. TCP/IP гарантирует, что письмо дойдет, но может быть медленнее.
UDP быстрее, но не гарантирует доставку.
